trigger:
- main

pool:
  name: 'Default'  # Ensure this matches your actual agent pool name
  demands:
  - maven
  - Agent.Version -gtVersion 2.163.1

# Define the stages for the multi-stage pipeline
stages:
# Build Stage
- stage: Build
  displayName: Build Application
  jobs:
  - job: BuildJob
    displayName: Build Job
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'webapp/pom.xml'  # Ensure correct path to your pom.xml
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKUserInputPath'
        jdkUserInputPath: 'C:\Program Files\Java\jdk-23'
        jdkVersionOption: '23'
        jdkArchitectureOption: 'x64'
        mavenVersionOption: 'Default'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    # Ensure that the target directory exists before copying files
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/webapp/target'  # Adjust if needed, check the output location
        Contents: '**/*.war'  # Ensure that the WAR files are being outputted by Maven
        TargetFolder: '$(Build.ArtifactStagingDirectory)'  # Artifact staging directory

    # Publish the build artifacts so they can be used in the deploy stage
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'warfile'
        publishLocation: 'Container'

# Deploy Stage
- stage: Deploy
  displayName: Deploy Application
  dependsOn: Build
  jobs:
  - job: DeployJob
    displayName: Deploy to Server
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'warfile'
        targetPath: '$(Pipeline.Workspace)\warfile'  # Downloads the artifact to the specified path

    # Debugging step to verify downloaded files
    - script: |
        echo "Listing contents of downloaded artifact folder..."
        dir "$(Pipeline.Workspace)\warfile"
      displayName: 'List Downloaded Artifact Contents'

    # Ensure the target directory exists
    - script: |
        echo "Creating target directory if it doesn't exist..."
        mkdir C:\target\deployment\directory
      displayName: 'Create Deployment Directory'

    # Copy WAR files to the target directory
    - script: |
        echo Deploying application...
        for /R "$(Pipeline.Workspace)\warfile" %%f in (*.war) do (
            echo Copying %%f to C:\target\deployment\directory
            copy "%%f" "C:\target\deployment\directory"
        )
      displayName: Deploy Application

